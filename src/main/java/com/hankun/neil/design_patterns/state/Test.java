package com.hankun.neil.design_patterns.state;

/**
 * 1 状态模式主要在于两系统之间状态的同步，例如activiti系统和主系统之间状态的同步，每次修改业务逻辑要同步处理工作流的信息
 *   拥有生命周期的对象一般也用状态模式处理，对于状态模式和策略模式的区别仅在业务逻辑上区分，类图都是一样的
 *
 * 2 状态模式与责任链模式的区别
 * 状态模式和责任链模式都能消除 if-else 分支过多的问题。但在某些情况下，状态模式中的状态可以理解为责任，那么在这种情况下，两种模式都可以使用。
 *
 * 从定义来看，状态模式强调的是一个对象内在状态的改变，而责任链模式强调的是外部节点对象间的改变。
 *
 * 从代码实现上来看，两者最大的区别就是状态模式的各个状态对象知道自己要进入的下一个状态对象，而责任链模式并不清楚其下一个节点处理对象，因为链式组装由客户端负责。
 * 3 状态模式与策略模式的区别
 * 状态模式和策略模式的 UML 类图架构几乎完全一样，但两者的应用场景是不一样的。策略模式的多种算法行为择其一都能满足，彼此之间是独立的，用户可自行更换策略算法，而状态模式的各个状态间存在相互关系，彼此之间在一定条件下存在自动切换状态的效果，并且用户无法指定状态，只能设置初始状态。
 *
 * 4 状态模式是一种对象行为型模式，其主要优点如下。
 * 结构清晰，状态模式将与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足“单一职责原则”。
 * 将状态转换显示化，减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态转换变得更加明确，且减少对象间的相互依赖。
 * 状态类职责明确，有利于程序的扩展。通过定义新的子类很容易地增加新的状态和转换。
 *
 * 5 状态模式的主要缺点如下。
 * 状态模式的使用必然会增加系统的类与对象的个数。
 * 状态模式的结构与实现都较为复杂，如果使用不当会导致程序结构和代码的混乱。
 * 状态模式对开闭原则的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源码，否则无法切换到新增状态，而且修改某个状态类的行为也需要修改对应类的源码。
 *
 * @author neil
 * @ClassName: Test
 * @Description: TODO
 * @date 2021/4/15 10:28
 */
public class Test {
    public static void main(String[] args) {
        Context context = new Context();    //创建环境
        context.Handle();    //处理请求
        context.Handle();
        context.Handle();
        context.Handle();
    }
}
